#+title: emacs.d
#+author: Tommaso Rossi

#+html: <a href="https://github.com/tomrss/emacs.d/actions/workflows/build.yml"><img alt="Build" src="https://github.com/tomrss/emacs.d/actions/workflows/build.yml/badge.svg"/></a>


Personal GNU Emacs configuration.

** Requirements

GNU Emacs 29.1 or greater.  Tested by CI on 29.1 and development snapshots, used every day on development snapshot.

** Guiding Principles

- Fast startup (less than 1 second with native compilation)
- Portable on multiple machines (or mutliple users) allowing changes between them
- Provide core basic features and pluggable modules
- Prioritize builtin features (=eglot=, =project=, =flymake=, ...) when it's possible
- Keep things standard
- Reproducible builds with functional package management (=straight.el=) and version lockfile
- Avoid too much key customization
- Keep the Emacs home directory clean
- It has to work in the terminal

** Installation

Clone the repo in =.emacs.d= (or the directory you want if you use the =--init-directory=
option of Emacs 29):

#+begin_src shell
  git clone https://github.com/tomrss/emacs.d .emacs.d
#+end_src

Install packages: start Emacs or launch installer script with:
#+begin_src shell
  cd .emacs.d
  make install
#+end_src

*** Upgrade dependencies

If you want to upgrade dependecies, you can pull latest upgrades on the main branch and
then sync dependencies:

#+begin_src shell
  make sync-from-lockfile rebuild
#+end_src

If you want to upgrade further, you can do:

#+begin_src shell
  make upgrade rebuild
#+end_src

** Local configuration

Every user installation can provide its own configuration in the =local-config.el= in the
init directory (by default =.emacs.d=). This file is loaded after core features but before
pluggable modules.

This file is gitignored, in fact it should be local only on one installation.

A typical usage of this local configuration is to decide which modules to plug in.

** The module system

This configuration provides features in two ways:

*** Core features

Core feature are basic and fundational features that are always pulled in.
This type of features prioritize builtin features and tries to keep the number of external
packages low. Also key customization is minimized.

In other words, core features try to enhance Emacs without diverging too much from the standards.

They include:

- Cleanup Emacs init directory
- Better defaults: enable or tweak features that are builtin
- Some UI tweaks (fonts, theme, ...)
- Completion framework: classic based on =vertico=, =corfu=, =marginalia= and =orderless=
- Try to make sense of window display and management (most notably with =shackle= rules)
- Boost =dired=
- Beautify =org-mode= (but not too much)
- Enhancement of compilation buffers and terminals (especially =eshell=)
- Development features mainly based on =eglot=

*** Pluggable modules

This modules are just Emacs Lisp files that can be pulled in or not in each installation.
A pluggable module can be loaded or not without breaking anything.

This approach helps to increase configuration portability over multiple machines and multiple
users, and also allow to maintain pieces of code no more used without loading them every time,
ready for possible future usage.

Modules that will be loaded are defined in the variable =u/enabled-modules=.
This variable can be changed in the local config file.

A default selection of modules is included in =init.el=.

The full list of modules is simply the list of files in =modules= directory.
